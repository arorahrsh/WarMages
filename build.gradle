import java.awt.*
import java.util.regex.Pattern

plugins {
  id 'java'
  id 'application'
  id 'findbugs'
  id 'jacoco'
  id "org.openjfx.javafxplugin" version "0.0.8"
}


jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$projectDir/reports/")
}
jacocoTestReport.dependsOn(test)

findbugs {
    toolVersion = "3.0.1"
    reportsDir = file("$projectDir/findbugsReports")
    effort = "max"
    reportLevel = "high"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
gradle.startParameter.excludedTaskNames.add("findbugsTest")

task(handleFindbugsFailure) {
    onlyIf {
        findbugsMain.state.failure != null
    }
    doFirst {
        print 'There were probably bugs found by Findbugs! If you see this error on the build ' +
                'server, then build the project locally to see the error info.'

        if (Desktop.isDesktopSupported()) {
            // Open findbugs report in system browser
            Desktop.desktop.browse new File("findbugsReports/main.html").toURI()
        }
    }
}
findbugsMain.finalizedBy handleFindbugsFailure

javafx {
    version = "12.0.2"
    modules = [ 'javafx.controls' ]
}

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Put any libraries here:
    // for example, put this:
    // compile group: 'com.google.code.gson', name: 'gson', version: '1.7.1'
    // to include this library https://github.com/google/gson if you like ...

    // Required dependencies for assignments (not tests):
    compile fileTree(dir: 'lib', include: ['*.jar']) // Include libraries in 'lib' directory

    // Tests are run in main module (which is unusual, but that's how SWEN221 is)
    compile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    compile 'com.google.code.gson:gson:2.8.2'

}

sourceSets {
    test {
        java.srcDir 'src/main/java'
    }
}

run {
    standardInput = System.in
    enableAssertions = true
//    args = ["--debug"]
}

task(lint) {
    def lintOut = new ByteArrayOutputStream()
    doFirst {
        javaexec {
            main = "-jar"
            args = [
                    "codecheck/checkstyle-8.1-all.jar",
                    "-c",
                    "codecheck/google_checks.xml",
                    "src/",
            ]
            standardOutput = lintOut
        }
    }
    doLast {
        // Check for any [WARN] or any [STUFF] lines and fail if they exist

        String output = lintOut.toString()
        def errorPattern = Pattern.compile "^\\[\\w+].*", Pattern.MULTILINE
        // Hack to check if multiline regex matches any line
        if (output.replaceAll(errorPattern, "") != output) {
            throw new Error(output)
        } else {
            // Just print output if no detected errors
            println(output)
        }
    }
}

check.dependsOn lint

mainClassName = 'main.Main'

task(buildAndContinueWhenErrors) {
}
buildAndContinueWhenErrors.dependsOn(assemble)
buildAndContinueWhenErrors.finalizedBy(lint)
buildAndContinueWhenErrors.finalizedBy(test)

